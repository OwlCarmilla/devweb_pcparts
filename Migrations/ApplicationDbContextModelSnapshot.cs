// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCParts.Data;

#nullable disable

namespace PCParts.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PCParts.Models.Armazem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("cidade");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("codigo");

                    b.Property<string>("Freguesia")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("freguesia");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nome");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("pais");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Codigo" }, "codigo")
                        .IsUnique();

                    b.ToTable("Armazem", (string)null);
                });

            modelBuilder.Entity("PCParts.Models.CategoriaPeca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("CategoriaPecas");
                });

            modelBuilder.Entity("PCParts.Models.EmpregadosArmazem", b =>
                {
                    b.Property<int>("IdEmpregado")
                        .HasColumnType("int")
                        .HasColumnName("id_empregado");

                    b.Property<int>("IdArmazem")
                        .HasColumnType("int")
                        .HasColumnName("id_armazem");

                    b.Property<string>("Cargo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cargo");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.HasKey("IdEmpregado", "IdArmazem")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdArmazem" }, "id_armazem");

                    b.ToTable("Empregados_Armazem", (string)null);
                });

            modelBuilder.Entity("PCParts.Models.Encomendum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEncomenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_encomenda")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Pendente','Processando','Enviada','Entregue','Cancelada')")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'Pendente'");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<decimal>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCliente" }, "id_cliente");

                    b.ToTable("Encomenda");
                });

            modelBuilder.Entity("PCParts.Models.Inventario", b =>
                {
                    b.Property<int>("IdPeca")
                        .HasColumnType("int")
                        .HasColumnName("id_peca");

                    b.Property<int>("IdArmazem")
                        .HasColumnType("int")
                        .HasColumnName("id_armazem");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.Property<DateTime?>("UltimaAtualizacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("ultima_atualizacao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UltimaAtualizacao"));

                    b.HasKey("IdPeca", "IdArmazem")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdArmazem" }, "id_armazem")
                        .HasDatabaseName("id_armazem1");

                    b.ToTable("Inventario", (string)null);
                });

            modelBuilder.Entity("PCParts.Models.ItemEncomendum", b =>
                {
                    b.Property<int>("IdEncomenda")
                        .HasColumnType("int")
                        .HasColumnName("id_encomenda");

                    b.Property<int>("IdPeca")
                        .HasColumnType("int")
                        .HasColumnName("id_peca");

                    b.Property<decimal>("PrecoUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco_unitario");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("quantidade");

                    b.HasKey("IdEncomenda", "IdPeca")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdPeca" }, "id_peca");

                    b.ToTable("Item_Encomenda", (string)null);
                });

            modelBuilder.Entity("PCParts.Models.Peca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria")
                        .HasColumnType("int")
                        .HasColumnName("categoria");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nome");

                    b.Property<string>("NumSerie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("num_serie");

                    b.Property<decimal>("Preco")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("preco");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Categoria" }, "categoria");

                    b.HasIndex(new[] { "NumSerie" }, "num_serie")
                        .IsUnique();

                    b.ToTable("Pecas");
                });

            modelBuilder.Entity("PCParts.Models.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("cidade");

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cod_postal");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Freguesia")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("freguesia");

                    b.Property<string>("Nif")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NIF");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("pais");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .HasColumnName("pass")
                        .IsFixedLength();

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Cliente','Empregado','Admin')")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'Cliente'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("Utilizador", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCParts.Models.EmpregadosArmazem", b =>
                {
                    b.HasOne("PCParts.Models.Armazem", "IdArmazemNavigation")
                        .WithMany("EmpregadosArmazems")
                        .HasForeignKey("IdArmazem")
                        .IsRequired()
                        .HasConstraintName("Empregados_Armazem_ibfk_2");

                    b.HasOne("PCParts.Models.Utilizador", "IdEmpregadoNavigation")
                        .WithMany("EmpregadosArmazems")
                        .HasForeignKey("IdEmpregado")
                        .IsRequired()
                        .HasConstraintName("Empregados_Armazem_ibfk_1");

                    b.Navigation("IdArmazemNavigation");

                    b.Navigation("IdEmpregadoNavigation");
                });

            modelBuilder.Entity("PCParts.Models.Encomendum", b =>
                {
                    b.HasOne("PCParts.Models.Utilizador", "IdClienteNavigation")
                        .WithMany("Encomenda")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("Encomenda_ibfk_1");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("PCParts.Models.Inventario", b =>
                {
                    b.HasOne("PCParts.Models.Armazem", "IdArmazemNavigation")
                        .WithMany("Inventarios")
                        .HasForeignKey("IdArmazem")
                        .IsRequired()
                        .HasConstraintName("Inventario_ibfk_2");

                    b.HasOne("PCParts.Models.Peca", "IdPecaNavigation")
                        .WithMany("Inventarios")
                        .HasForeignKey("IdPeca")
                        .IsRequired()
                        .HasConstraintName("Inventario_ibfk_1");

                    b.Navigation("IdArmazemNavigation");

                    b.Navigation("IdPecaNavigation");
                });

            modelBuilder.Entity("PCParts.Models.ItemEncomendum", b =>
                {
                    b.HasOne("PCParts.Models.Encomendum", "IdEncomendaNavigation")
                        .WithMany("ItemEncomenda")
                        .HasForeignKey("IdEncomenda")
                        .IsRequired()
                        .HasConstraintName("Item_Encomenda_ibfk_1");

                    b.HasOne("PCParts.Models.Peca", "IdPecaNavigation")
                        .WithMany("ItemEncomenda")
                        .HasForeignKey("IdPeca")
                        .IsRequired()
                        .HasConstraintName("Item_Encomenda_ibfk_2");

                    b.Navigation("IdEncomendaNavigation");

                    b.Navigation("IdPecaNavigation");
                });

            modelBuilder.Entity("PCParts.Models.Peca", b =>
                {
                    b.HasOne("PCParts.Models.CategoriaPeca", "CategoriaNavigation")
                        .WithMany("Pecas")
                        .HasForeignKey("Categoria")
                        .IsRequired()
                        .HasConstraintName("Pecas_ibfk_1");

                    b.Navigation("CategoriaNavigation");
                });

            modelBuilder.Entity("PCParts.Models.Armazem", b =>
                {
                    b.Navigation("EmpregadosArmazems");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("PCParts.Models.CategoriaPeca", b =>
                {
                    b.Navigation("Pecas");
                });

            modelBuilder.Entity("PCParts.Models.Encomendum", b =>
                {
                    b.Navigation("ItemEncomenda");
                });

            modelBuilder.Entity("PCParts.Models.Peca", b =>
                {
                    b.Navigation("Inventarios");

                    b.Navigation("ItemEncomenda");
                });

            modelBuilder.Entity("PCParts.Models.Utilizador", b =>
                {
                    b.Navigation("EmpregadosArmazems");

                    b.Navigation("Encomenda");
                });
#pragma warning restore 612, 618
        }
    }
}
